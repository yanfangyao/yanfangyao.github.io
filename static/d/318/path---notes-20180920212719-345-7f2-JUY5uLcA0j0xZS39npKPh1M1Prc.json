{"data":{"site":{"siteMetadata":{"title":"William's Blog","author":"William"}},"markdownRemark":{"id":"c31f6b6a-9124-5f46-a21f-b3d5fb59cd11","excerpt":"前言 　　ECMAScript 5引入了严格模式（strict mode）的概念，对向来以宽语法规则出名的javascript语言进行了一系列约束。javascript的严格模式并不是必须的，可以根据需要选择性的将代码放在严格模式下执行。 如何启用严格模式 　　ECMAScript…","html":"<h2>前言</h2>\n<p>　　ECMAScript 5引入了严格模式（strict mode）的概念，对向来以宽语法规则出名的javascript语言进行了一系列约束。javascript的严格模式并不是必须的，可以根据需要选择性的将代码放在严格模式下执行。</p>\n<h2>如何启用严格模式</h2>\n<p>　　ECMAScript 5的严格模式有其作用范围：<strong>整个脚本</strong>或者<strong>函数作用域</strong>。严格模式在块级作用域中不起作用。启用严格模式的方法是在javascript脚本或者函数作用域开头插入语句”use strict”;或者’use strict’;。<br>\n　　ECMAScipt 6中引入了模块的概念，对于一个javascript模块而言，其默认使用严格模式解析。</p>\n<h2>严格模式带来的好处</h2>\n<h3>对错误语法报出运行时错误</h3>\n<p>　　因为javascript语法的宽容性，在非严格模式下运行脚本时，解析器会自动忽略一些错误的语法。在严格模式下，对于语法错误，javascript解析器会抛出运行时错误，提醒开发者脚本出错。相关的错误语法可以归结为如下几类：<br>\n　　（1）隐式创建全局对象属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在非严格模式下，以下代码可以正常运行，会给当前全局对象创建一个名为invalidVar的属性。</span>\n<span class=\"token comment\">// 在严格模式下，执行以下代码时，解析器会报出Reference Error错误。</span>\ninvalidVar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（2）不合法的赋值操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以下示例代码在非严格模式下运行时均不会报错，解析器会直接忽略这些操作</span>\n<span class=\"token comment\">// 但是在严格模式运行以下代码时，解析器会报错</span>\n\n<span class=\"token comment\">// 给内置的具有只读属性的全局变量属性赋值</span>\nundefined <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在严格模式下会报出TypeError</span>\n\n<span class=\"token comment\">// 给一个普通对象的只读属性复制</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token string\">'prop'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在严格模式下会报出TypeError错误</span>\nobj1<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 给一个对象已经设置了getter的属性赋值</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在严格模式下会报出TypeError错误</span>\nobj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 给一个设置了不能扩展的对象增加新属性</span>\n<span class=\"token keyword\">var</span> nonExensible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>nonExensible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在严格模式下会报出TypeError错误</span>\nnonExensible<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（3）删除不能删除的属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 下面的代码在严格模式下执行会报出TypeError错误</span>\n<span class=\"token keyword\">delete</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（4）函数参数名重复。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在非严格模式下，解析器不会报错，对于重名的参数而言，实际使用参数时，解析器会取参数列表中位置最靠后的已赋值的同名参数值。</span>\n<span class=\"token comment\">// 在严格模式下，解析器会报出SyntaxError</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　（5）使用八进制数表示方法。<br>\n　　现代浏览器都支持在数字前面添加前缀数字0表示八进制数，但是在严格模式下，这种八进制表示方法是错误的。ECMAScript 5并没有规定八进制数字的表示方式。ECMAScript 6使用’0o’（数字0和字母o）作为八进制数字的前缀。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在严格模式下，下面的代码会报出SyntaxError错误</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">012</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（6）给原始类型值添加属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以下代码在严格模式下运行会报出TypeError错误</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>有利于编译器更好地优化代码</h3>\n<p>　　严格模式通过简化变量的使用方式，禁止了变量的一些复杂用法，可以让编译器在运行前做一些关于变量的优化工作。<br>\n　　（1）禁止with语法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 严格模式禁止使用with语法，以下代码运行在严格模式下会抛出SyntaxError错误</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　（2）eval语句不再引入新变量到当前执行上下文中。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在非严格模式下，执行下面的语句会在当前上下文中引入新的变量a</span>\n<span class=\"token comment\">// 在严格模式下，执行下面的语句并不会在当前上下文中引入新变量</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var a = 1;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（3）delete删除原始类型变量会报错。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> primitive <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 严格模式下会报出SyntaxError</span>\n<span class=\"token keyword\">delete</span> primitive<span class=\"token punctuation\">;</span></code></pre></div>\n<p>　　（4）arguments中的元素不再和函数参数进行绑定，只保存传入参数的初始值。参数值的改变和arguments中元素值的改变互不干扰。<br>\n　　（5）禁止arguments.callee。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 严格模式下运行下面代码报出TypeError错误</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>编写更安全的代码</h3>\n<p>　　（1）函数中的this取值不再限制于只能是对象。<br>\n　　在非严格模式下，当给this赋值为原始类型时，解析器自动将原始类型进行封装，转换成对应的对象类型，如给this赋值1时，解析器会执行Number(1)对数字进行封装；当给this赋值为undefined、null或者不赋值时，解析器会将this赋值成当前所处环境的全局对象。然而，在严格模式下，编译器不会对this的值进行自动封装，当不设置this的值时，this的值为undefined。<br>\n　　（2）禁止使用函数的caller属性、arguments属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 严格模式下报出TypeError错误</span>\n    func<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 严格模式下报出TypeError错误</span>\n    func<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>操作保留关键字会报错</h3>\n<p>　　在严格模式下使用保留的关键字会报出SyntaxError错误，保留的关键字有<strong>implements, interface, let, package, private, protected, public, static, yield</strong>。</p>\n<h2>总结</h2>\n<p>　　严格模式的使用会促使前端开发者编写出更加安全可靠的代码。在使用ECMAScript 5语法进行业务开发时，笔者建议使用javascript的严格模式。对于ECMAScript 6语法而言，babel编译工具将其编译为ECMAScript 5语法时自动开启严格模式，开发者也可以配置babel不使用严格模式。</p>\n<h2>参考文献</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">MDN: Strict mode</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">MDN: Transitioning to strict mode</a></li>\n</ol>","frontmatter":{"title":"ECMAScript 5的严格模式","date":"September 20, 2018","description":"ECMAScript 5引入了严格模式（strict mode）的概念，对向来以宽语法规则出名的javascript语言进行了一系列约束。javascript的严格模式并不是必须的，可以根据需要选择性的将代码放在严格模式下执行。本篇博文对严格模式及开启严格模式带来的好处作了详细地介绍。"}}},"pageContext":{"slug":"/notes/20180920212719/","previous":{"fields":{"slug":"/notes/20180824143040/"},"frontmatter":{"title":"MVC、MVP、MVVM软件架构学习笔记"}},"next":{"fields":{"slug":"/notes/20181010191446/"},"frontmatter":{"title":"如何理解React的虚拟DOM？"}}}}