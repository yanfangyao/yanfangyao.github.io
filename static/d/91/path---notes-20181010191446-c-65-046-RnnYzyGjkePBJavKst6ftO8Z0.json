{"data":{"site":{"siteMetadata":{"title":"William's Blog","author":"William"}},"markdownRemark":{"id":"d89f11c4-a275-558a-a10a-048e3ce7217d","excerpt":"真实的DOM 　　在web应用中，浏览器接收到服务器返回的html文档后，会将html文档解析成DOM树，具体流程可以参考 这篇博文 。DOM树是浏览器在 内存中对html文档的抽象化表示 ，方便开发者使用javascript操作html文档。在传统的前端开发模式下，页面的更新方式大致如图1所示。 　　传统的web…","html":"<h2>真实的DOM</h2>\n<p>　　在web应用中，浏览器接收到服务器返回的html文档后，会将html文档解析成DOM树，具体流程可以参考<a href=\"/notes/20180424213011/\">这篇博文</a>。DOM树是浏览器在<strong>内存中对html文档的抽象化表示</strong>，方便开发者使用javascript操作html文档。在传统的前端开发模式下，页面的更新方式大致如图1所示。</p>\n<center>\n<p><img src=\"/static/tranditional_interaction-ccd2e0c6295d704f69925241c48224ef.svg\" alt=\"传统页面更新方式\"></p>\n</center>\n<center>图 1 传统的页面更新方式</center>\n<p>　　传统的web页面更新方式是利用javascript直接操作DOM树，这种做法对于结构简单的页面来说无可厚非，但是对于具有复杂交互功能的页面而言，其效率非常低下。实际上，对于一个大型网站而言，使用javascript对DOM树进行增、删、查、改等操作造成的开销很大，并且无法有效地减少无意义的DOM操作（比如使用javascript动态生成一个列表，就算新列表和旧列表之间只有一列不相同，但是新列表仍然会整个替换旧列表）。除了效率低下之外，传统的前端开发模式编写的代码非常不利于维护，代码中充斥着各种写死的类名和id名以及各种事件绑定函数。</p>\n<h2>虚拟DOM</h2>\n<p>　　因为频繁地操作真实DOM开销巨大，为了减少无意义的DOM操作，提高页面性能，React在浏览器DOM的基础上进行进一步抽象，实现了一套独立于浏览器的虚拟DOM。所谓虚拟DOM，即一个用来描述真实DOM的javascript对象。React使用ReactElement来对真实的DOM进行抽象，对于每一个真实的DOM元素，如div、span等，React均可以创建一个对应的ReactElement对象。React 16中创建ReactElement对象的createElement方法的源码及笔者标出的注释如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 保留的属性，用户不能修改</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RESERVED_PROPS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  __self<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  __source<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 创建ReactElement对象的工厂函数\n * @param {*} type 元素类型\n * @param {*} key 元素的key，React的虚拟DOM diff算法会用到\n * @param {string|object} ref ReactElemet生成的实际DOM的引用\n * @param {*} self 临时变量，用于检测调用React.createElement时'this'与'owner'不同的地方，以便发出警告\n * @param {*} source 一个注释对象，指明文件名、行号或者其他信息\n * @param {*} owner 创建该元素的组件\n * @param {*} props 元素属性\n * @internal\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ReactElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// $$typeof属性可以用来判断元素类型，REACT_ELEMENT_TYPE是一个常量，表示当前对象为ReactElement类型</span>\n        $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">REACT_ELEMENT_TYPE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 类型</span>\n        type<span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 标志</span>\n        key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 生成的真实DOM的引用</span>\n        ref<span class=\"token punctuation\">:</span> ref<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 属性</span>\n        props<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 创建改元素的组件</span>\n        _owner<span class=\"token punctuation\">:</span> owner<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 开发环境下的操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        element<span class=\"token punctuation\">.</span>_store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">,</span> <span class=\"token string\">'validated'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// self属性和source属性只在开发环境下有用</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token string\">'_self'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token string\">'_source'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">:</span> source<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 冻结对象</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>freeze<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @param {*} type 元素类型，取值可以是DOM元素名，如'div', 'span'等；可以取值为ReactComponent类型或 者ReactFragment类型\n * @param {*} config 元素属性\n * @param {*} children 元素子元素，取值可以为多个\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> propName<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Reserved names are extracted</span>\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断输入的ref属性和key属性是否合法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidRef</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          ref <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidKey</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          key <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 设置self属性和source属性</span>\n        self <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__self <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>__self<span class=\"token punctuation\">;</span>\n        source <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__source <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>__source<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 将config中非保留属性复制到props中</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            hasOwnProperty<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span><span class=\"token constant\">RESERVED_PROPS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 可以以多个参数的方式将子元素传入</span>\n    <span class=\"token keyword\">const</span> childrenLength <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 只有一个子元素时，直接赋值给props对象的children属性</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> childArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>childrenLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            childArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 在开发环境下冻结childArray</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>freeze<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>childArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 拥有多个子元素时，转换成数组赋值给children属性</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> childArray<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 解析默认属性</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">&amp;&amp;</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> defaultProps <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> defaultProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 在开发环境下对key和ref进行处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">||</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> displayName <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n                    <span class=\"token operator\">?</span> type<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> type<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'Unknown'</span>\n                    <span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 试图直接访问key属性时出现警告</span>\n                <span class=\"token function\">defineKeyPropWarningGetter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 试图直接访问ref属性时出现警告</span>\n                <span class=\"token function\">defineRefPropWarningGetter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 返回生成的ReactElement对象</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>\n        type<span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">,</span>\n        ref<span class=\"token punctuation\">,</span>\n        self<span class=\"token punctuation\">,</span>\n        source<span class=\"token punctuation\">,</span>\n        ReactCurrentOwner<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　在React中，所有对真实DOM的操作都转换为对虚拟DOM的操作。使用React开发时页面的更新方式可以用图2描述：</p>\n<center>\n<p><img src=\"/static/react_interaction-d1867788d14a591cc8b41c3a17413b86.svg\" alt=\"使用React框架后页面更新方式\"></p>\n</center>\n<center>图 2 使用React框架后页面更新方式</center>\n<p>　　在更新DOM时，React不会直接操作所有ReactElement对象对应的真实DOM，而是首先对比当前新生成的ReactElement对象和旧ReactElement对象之间的差异，然后只操作发生了变化的ReactElement对象对应的真实DOM来更新页面。React减少了无意义的DOM操作，提高了页面性能。<br>\n　　在React中，ReactElement对象是不可变的，一旦被创建之后，其属性不能被更改，当需要更新页面时，必须重新创建和渲染ReactElement对象。为了更好地组织页面，React引入了ReactComponent的概念。本文重点在于介绍React的虚拟DOM，关于ReactComponent的介绍，笔者会在后续博文中进行总结。<br></p>\n<h2>参考文献</h2>\n<ol>\n<li><a href=\"https://www.codecademy.com/articles/react-virtual-dom\">React: The Virtual DOM</a></li>\n<li><a href=\"http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\">The difference between Virtual DOM and DOM</a></li>\n<li><a href=\"https://reactjs.org/docs/dom-elements.html\">reactjs: dom-elements</a></li>\n<li><a href=\"https://reactjs.org/docs/rendering-elements.html\">reactjs: rendering-elements</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010924023\">segmentfault: 图解 React Virtual DOM</a></li>\n</ol>","frontmatter":{"title":"如何理解React的虚拟DOM？","date":"October 10, 2018","description":"React框架中引入虚拟DOM的概念提高了web应用中DOM渲染的效率，刚接触React框架时，笔者一直都有一个疑问：React框架的虚拟DOM到底是什么？虚拟DOM与真实DOM的区别是什么？为了解决这两个问题，笔者阅读了React框架相关源码并查阅了对应文档，将总结写成了这篇博客。"}}},"pageContext":{"slug":"/notes/20181010191446/","previous":{"fields":{"slug":"/notes/20180920212719/"},"frontmatter":{"title":"ECMAScript 5的严格模式"}},"next":{"fields":{"slug":"/tips/20181014214613/"},"frontmatter":{"title":"如何安全可靠地检测浏览器存储是否可用？"}}}}