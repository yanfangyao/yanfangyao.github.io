{"data":{"site":{"siteMetadata":{"title":"William's Blog","author":"William"}},"markdownRemark":{"id":"c593b1b1-88be-50a1-8f30-e8325f5c9669","excerpt":"问题背景 　　在使用react进行项目开发时，经常会遇到需要在组件中异步请求服务端数据的情况。项目组成员在react组件发送异步请求的时机上往往有分歧，一少部分人支持在生命周期函数componentWillMount中发送请求，更多的人支持在生命周期函数componentDidMount…","html":"<h2>问题背景</h2>\n<p>　　在使用react进行项目开发时，经常会遇到需要在组件中异步请求服务端数据的情况。项目组成员在react组件发送异步请求的时机上往往有分歧，一少部分人支持在生命周期函数componentWillMount中发送请求，更多的人支持在生命周期函数componentDidMount中处理请求。那究竟在哪个生命期函数中处理异步请求较好呢？</p>\n<h2>问题解决方案</h2>\n<p>　　<a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data\">react官方文档</a>推荐在componentDidMount中处理组件的异步请求，理由如下：</p>\n<ol>\n<li>如果在componentWillMount中发送异步请求，在SSR（服务端渲染）的情况下，服务端与客户端共用一套组件原代码，此时会发出两次请求（服务端请求一次、客户端请求一次），服务端的请求是多余的。如果将异步请求放在componentDidMount中，服务器不会执行componentDidMount生命周期函数，可以减少不必要的请求。</li>\n<li>从react 16.3开始，componentWillMount这个生命周期函数会被丢弃，于是不建议使用componentWillMount。</li>\n</ol>\n<p>　　<a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data\">react官方文档</a>还建议，在服务端渲染过程中如果需要在组件渲染前同步获取数据，可以使用constructor替换componentWillMount进行处理。</p>","frontmatter":{"title":"react组件何时请求异步数据——componentWillMount或者componentDidMount?","date":"July 13, 2018","description":"在使用react进行项目开发时，经常会遇到需要在组件中异步请求服务端数据的情况。项目组成员在react组件发送异步请求的时机上往往有分歧，一少部分人支持在声明周期函数componentWillMount中发送请求，更多的人支持在生命周期函数componentDidMount中处理请求。那究竟在哪个生命期函数中处理异步请求较好呢？"}}},"pageContext":{"slug":"/tips/20180713160854/","previous":{"fields":{"slug":"/notes/20180620190521/"},"frontmatter":{"title":"现代浏览器的工作原理（三）"}},"next":{"fields":{"slug":"/notes/20180717214533/"},"frontmatter":{"title":"meta标签学习笔记"}}}}