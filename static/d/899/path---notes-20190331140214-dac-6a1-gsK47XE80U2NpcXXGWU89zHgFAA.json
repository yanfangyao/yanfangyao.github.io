{"data":{"site":{"siteMetadata":{"title":"William's Blog","author":"William"}},"markdownRemark":{"id":"baeb77d9-7816-58f2-a1eb-68282afd3a3c","excerpt":"element 　　React中的element是一个用来描述React组件（component）或DOM节点的 类型 和 属性 的普通javascript对象。element对象是React实现虚拟DOM的关键之一。在React框架中，element只是一个对UI元素（组件或者DOM…","html":"<h2>element</h2>\n<p>　　React中的element是一个用来描述React组件（component）或DOM节点的<strong>类型</strong>和<strong>属性</strong>的普通javascript对象。element对象是React实现虚拟DOM的关键之一。在React框架中，element只是一个对UI元素（组件或者DOM节点）进行抽象描述的对象，一旦被创建，不能被修改。每个element对象包含两个核心的属性：<strong>type: (string | function | ReactClass)</strong>和<strong>props: (Object)</strong>。<br>\n　　type属性取值类型可以是字符串、函数和ReactClass(React组件对应的class，class语法是ES6引入）。当type属性值类型是字符串时，element对象描述的是一个真实的DOM节点。节点的名字是type属性值，节点的属性名和属性值分别对应于element对象props属性属性值的键名和键值。比如有一个element对象： </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World!\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　它描述的真实DOM节点如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>　　DOM节点之间的层级嵌套关系可以用element对象props属性属性值的children属性来描述，children属性值可以是新的element对象或者包含多个新的element对象的数组，也可以是其他类型。<br>\n　　当element对象的type属相值类型是函数或者ReactClass时，element描述的是一个React组件。我们使用jsx语法定义一个简单的React组件Avatar：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Avatar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> imgUrl<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>img\n      src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imgUrl<span class=\"token punctuation\">}</span>\n      alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">的头像`</span></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>　　当创建一个头像链接是 ‘a’、用户名为 ‘b’ 的Avatar组件时，可以用如下的element对象对创建出来的Avatar组件进行描述：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> Avatar<span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"imgUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　React框架支持以下三种方式来创建element对象：</p>\n<ol>\n<li>\n<p>React.createElement(type, [props], […children])。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>jsx语法。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>React.createFactory(type)。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> eleFactory <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> <span class=\"token function\">eleFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<h2>component</h2>\n<p>　　element对象是不可变的，对于新添加的DOM节点来说，必须要新建对应的element对象。如果需要开发者来跟踪UI状态并控制element对象的销毁与创建，那React框架存在的意义不大。React设计出了组件机制，组件机制可以方便开发者将结构复杂的UI拆分成多个独立UI组件单独开发。独立的UI组件组合起来就可以构建出具有复杂交互功能的UI。<br>\n　　React组件实现的功能是对element树的封装，在不同的输入下，组件输出不同的element树，最终渲染成不同的DOM树，以实现UI交互功能。开发者创建React组件的方式一般有两种：</p>\n<ol>\n<li>\n<p>函数。示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1 <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello world！<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>ES6 class语法，继承React.Component。示例如下：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1 <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello world！<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　不管React组件以何种方式被创建，它们实现的功能本质上都是以组件的属性props作为输入，输出不同的element树。它们的不同之处在于：使用ES6的class语法创建的组件可以保存自己内部的状态（state）并根据自身状态更新返回的element树（setState），同时它可以根据需要实现React组件的生命周期函数；使用函数创建的React组件是无状态的，无法实现React组件的生命周期函数。使用函数创建组件的开销要小于使用ES6 class语法的开销，当React组件不需要保存自身状态时可以优先考虑使用函数创建React组件。<br>\n　　上一小节讲到，组件也是用element对象来描述。在React框架中，描述组件的element对象可以和描述DOM节点的element对象通过props属性值中的children相互嵌套。这一特性使得React框架支持相互独立的UI组件之间、组件与DOM节点之间互相嵌套组合形成新的UI组件，提高了代码的可复用性和可扩展性。</p>\n<h2>instance</h2>\n<p>　　instance是面向对象语言中的词目，在React中可以被理解为 “组件实例”，上述使用ES6 class语法创建MyComponent的示例中this指向的就是MyComponent的实例。 React只会对使用ES6 class语法创建的组件进行实例化，并且instance的创建完全对开发者隐藏，开发者只需关心组件自身的逻辑。</p>\n<h2>总结</h2>\n<ol>\n<li>在React框架中，DOM节点和组件都使用element对象来描述。</li>\n<li>在React框架中，组件本质上是接受属性props作为输入，输出不同的element树。</li>\n<li>在React框架中，不管是渲染组件还是DOM节点，创建的都是element对象，React依据自身渲染规则将element对象映射到真实的DOM节点。</li>\n<li>在React框架中，instance表示组件实例，React只会对以ES6 class语法创建组件进行实例化，并且整个实例化过程完全对开发者隐藏，开发者只需关心组件自身的逻辑。</li>\n</ol>\n<h2>参考文献</h2>\n<ol>\n<li><a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html#fn-1\">Dan Abramov: React Components, Elements, and Instances</a></li>\n</ol>","frontmatter":{"title":"如何理解React框架中的element、component以及instance？","date":"March 31, 2019","description":"在《如何理解React的虚拟DOM？》这篇博文中，笔者对React框架中虚拟DOM的概念进行了阐述，并在博文中列举了ReactElement的源码。由于博文的重点在于虚拟DOM，笔者并没有针对React中的element和component进行详细地描述和总结。为了补充这部分的内容，本博文对React框架中的element、component以及instance进行了详细地介绍。"}}},"pageContext":{"slug":"/notes/20190331140214/","previous":{"fields":{"slug":"/tips/20181014214613/"},"frontmatter":{"title":"如何安全可靠地检测浏览器存储是否可用？"}},"next":{"fields":{"slug":"/notes/20190503180400/"},"frontmatter":{"title":"JavaScript的异步编程"}}}}