{"data":{"site":{"siteMetadata":{"title":"William's Blog","author":"William"}},"markdownRemark":{"id":"57dbf74a-af8c-577c-a9e3-f1b78289e7f1","excerpt":"遇到的坑 　　最近接触的H5项目需求中需要用到浏览器存储来记录用户足迹，笔者采用判断存储对象是否存在的方法来检验方法来校验浏览器存储是否可用，示例代码如下： 　　H5上线后，当其嵌入公司内部app时，页面报错。经过分析和排查，错误的原因在于校验浏览器存储可用性的方法不合理。公司内部app使用的webview…","html":"<h2>遇到的坑</h2>\n<p>　　最近接触的H5项目需求中需要用到浏览器存储来记录用户足迹，笔者采用判断存储对象是否存在的方法来检验方法来校验浏览器存储是否可用，示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这样就认为浏览器存储可用</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　H5上线后，当其嵌入公司内部app时，页面报错。经过分析和排查，错误的原因在于校验浏览器存储可用性的方法不合理。公司内部app使用的webview版本很老，会禁止浏览器存储的使用，就连访问window对象的localStorage属性也会报错。<br>\n　　考虑到目前用户手机上存在各种不同特性的浏览器和webview，如何才能安全可靠地检测不同浏览器环境下浏览器存储是否可用？</p>\n<h2>问题解决方案</h2>\n<p>　　浏览器<strong>支持存储功能</strong>与<strong>存储功能可用</strong>不是一个概念，比如Safari在隐身模式下会将浏览器localStorage存储容量设置为0，意味着浏览器的存储功能实际不可用，但是Safari是支持浏览器存储功能的。部分浏览器甚至可以让用户设置禁止浏览器存储。因此，笔者在项目中想通过检测window全局对象上是否有localStorage属性来判断当前浏览器localStorage是否可用的方法是非常片面的，只能适用于部分场景。笔者查阅资料后得知，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\">MDN官方文档</a>介绍了一个可以安全可靠地检测浏览器存储可用性的函数，其源码如下：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">storageAvailable</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> storage <span class=\"token operator\">=</span> window<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=</span> <span class=\"token string\">'__storage_test__'</span><span class=\"token punctuation\">;</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DOMException</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// 当异常是由浏览器存储容量不够造成时，需要排除浏览器存储容量限额为0的特殊情况</span>\n            <span class=\"token comment\">// 非Firefox浏览器存储内容大小超出存储容量时所报出异常的code</span>\n<span class=\"gatsby-highlight-code-line\">            e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">22</span> <span class=\"token operator\">||</span></span>            <span class=\"token comment\">// Firefox浏览器存储内容大小超出存储容量时所报出异常的code</span>\n<span class=\"gatsby-highlight-code-line\">            e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">1014</span> <span class=\"token operator\">||</span></span>            <span class=\"token comment\">// 除了检测异常的code属性外，还需要检测异常的name属性，防止部分情况下异常没有code属性</span>\n            <span class=\"token comment\">// 非Firefox浏览器</span>\n<span class=\"gatsby-highlight-code-line\">            e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'QuotaExceededError'</span> <span class=\"token operator\">||</span></span>            <span class=\"token comment\">// Firefox浏览器</span>\n<span class=\"gatsby-highlight-code-line\">            e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'NS_ERROR_DOM_QUOTA_REACHED'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></span>            <span class=\"token comment\">// 排除存储容量不为0的情况</span>\n<span class=\"gatsby-highlight-code-line\">            storage<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>　　源码中的高亮部分为不同浏览器环境下判断异常是否是由浏览器存储容量溢出而造成的。需要注意的一点是，存储容量溢出并且存储容量的大小不为0代表浏览器存储是可用的，此时只需要删除部分存储内容即可。<br>\n　　该可用性检测函数对于localStorage和sessionStorage均适用，在使用浏览器存储前，利用上述函数检测浏览器存储是否可用是安全可靠的。</p>\n<h2>参考文献</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\">MDN文档：Using the Web Storage API</a></li>\n</ol>","frontmatter":{"title":"如何安全可靠地检测浏览器存储是否可用？","date":"October 14, 2018","description":"最近接触的H5项目需求中需要用到浏览器存储来记录用户足迹，笔者采用判断存储对象是否存在的方法来检验方法来校验浏览器存储是否可用。H5上线后，当其嵌入公司内部app时，页面报错。经过分析和排查，错误的原因在于校验浏览器存储可用性的方法不合理。本文介绍了一种安全可靠地检测浏览器存储可用性的方法。"}}},"pageContext":{"slug":"/tips/20181014214613/","previous":{"fields":{"slug":"/notes/20181010191446/"},"frontmatter":{"title":"如何理解React的虚拟DOM？"}},"next":{"fields":{"slug":"/notes/20190331140214/"},"frontmatter":{"title":"如何理解React框架中的element、component以及instance？"}}}}