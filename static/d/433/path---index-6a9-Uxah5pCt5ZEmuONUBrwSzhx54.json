{"data":{"site":{"siteMetadata":{"title":"William's Blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"遇到的坑 　　最近接触的H5项目需求中需要用到浏览器存储来记录用户足迹，笔者采用判断存储对象是否存在的方法来检验方法来校验浏览器存储是否可用，示例代码如下： 　　H5上线后，当其嵌入公司内部app…","fields":{"slug":"/tips/20181014214613/"},"frontmatter":{"date":"October 14, 2018","title":"如何安全可靠地检测浏览器存储是否可用？","description":"最近接触的H5项目需求中需要用到浏览器存储来记录用户足迹，笔者采用判断存储对象是否存在的方法来检验方法来校验浏览器存储是否可用。H5上线后，当其嵌入公司内部app时，页面报错。经过分析和排查，错误的原因在于校验浏览器存储可用性的方法不合理。本文介绍了一种安全可靠地检测浏览器存储可用性的方法。"}}},{"node":{"excerpt":"真实的DOM 　　在web应用中，浏览器接收到服务器返回的html文档后，会将html文档解析成DOM树，具体流程可以参考 这篇博文 。DOM树是浏览器在 内存中对html文档的抽象化表示 ，方便开发者使用javascript操作html…","fields":{"slug":"/notes/20181010191446/"},"frontmatter":{"date":"October 10, 2018","title":"如何理解React的虚拟DOM？","description":"React框架中引入虚拟DOM的概念提高了web应用中DOM渲染的效率，刚接触React框架时，笔者一直都有一个疑问：React框架的虚拟DOM到底是什么？虚拟DOM与真实DOM的区别是什么？为了解决这两个问题，笔者阅读了React框架相关源码并查阅了对应文档，将总结写成了这篇博客。"}}},{"node":{"excerpt":"前言 　　ECMAScript 5引入了严格模式（strict mode）的概念，对向来以宽语法规则出名的javascript语言进行了一系列约束。javascript…","fields":{"slug":"/notes/20180920212719/"},"frontmatter":{"date":"September 20, 2018","title":"ECMAScript 5的严格模式","description":"ECMAScript 5引入了严格模式（strict mode）的概念，对向来以宽语法规则出名的javascript语言进行了一系列约束。javascript的严格模式并不是必须的，可以根据需要选择性的将代码放在严格模式下执行。本篇博文对严格模式及开启严格模式带来的好处作了详细地介绍。"}}},{"node":{"excerpt":"前言 　　MVC、MVP和MVVM是开发GUI（图形用户界面）应用程序时常用的软件架构模式。它们的目的是通过一些手段将GUI应用程序的用户界面（View）和数据（Model…","fields":{"slug":"/notes/20180824143040/"},"frontmatter":{"date":"August 24, 2018","title":"MVC、MVP、MVVM软件架构学习笔记","description":"MVC、MVP和MVVM是开发GUI（图形用户界面）应用程序时常用的软件架构模式。它们的目的是通过一些手段将GUI应用程序的用户界面（View）和数据（Model）进行分离，提高代码的可复用性和可维护性。本文对三种架构模式的思想进行了深入研究并对比分析了它们的优缺点。"}}},{"node":{"excerpt":"sourcemap产生的背景 　　前端代码开发已经实现了模块化和工程化。为了减小静态资源体积，一般会选择将对js和css文件进行压缩形成一个或者多个bundle…","fields":{"slug":"/notes/20180718144710/"},"frontmatter":{"date":"July 18, 2018","title":"sourcemap学习笔记","description":"前端代码开发已经实现了模块化和工程化。为了减小静态资源体积，一般会选择将对js和css文件进行压缩形成一个或者多个bundle文件。压缩后的代码几乎不具有可毒性。这样会存在一个问题：当压缩后代码出现错误时，我们如何快速地定位到源码中出错的位置？sourcemap文件就是为了解决这种问题而被设计出来的。sourcemap在编译压缩后的bundle与源代码之间建立了一个映射关系，通过sourcemap可以很快地找到bundle中某一行代码在源代码中对应的位置。本博文对sourcemap原理进行了详细介绍。"}}},{"node":{"excerpt":"meta标签作用 　　meta标签提供了title、base、link、style和script等标签无法提供的html文档元数据信息。 元数据 　　元数据是用来描述数据的数据。html文档的元数据包括文档作者、描述、关键词、视口大小等信息。html…","fields":{"slug":"/notes/20180717214533/"},"frontmatter":{"date":"July 17, 2018","title":"meta标签学习笔记","description":"meta标签提供了title、base、link、style和script等标签无法提供的html文档元数据信息。meta对网站的seo性能至关重要。本博文对meta标签的作用进行了详细地介绍。"}}},{"node":{"excerpt":"问题背景 　　在使用react进行项目开发时，经常会遇到需要在组件中异步请求服务端数据的情况。项目组成员在react组件发送异步请求的时机上往往有分歧，一少部分人支持在生命周期函数componentWillMount…","fields":{"slug":"/tips/20180713160854/"},"frontmatter":{"date":"July 13, 2018","title":"react组件何时请求异步数据——componentWillMount或者componentDidMount?","description":"在使用react进行项目开发时，经常会遇到需要在组件中异步请求服务端数据的情况。项目组成员在react组件发送异步请求的时机上往往有分歧，一少部分人支持在声明周期函数componentWillMount中发送请求，更多的人支持在生命周期函数componentDidMount中处理请求。那究竟在哪个生命期函数中处理异步请求较好呢？"}}},{"node":{"excerpt":"解析CSS的流程 　　现代浏览器解析CSS文档的流程如图1所示。 　　现代浏览器解析CSS的流程与解析html的流程类似：从网络或者本地获取CSS文件后，经过解码器、预处理器、标记生成器以及树构建器处理之后生成一个CSSStyleSheet…","fields":{"slug":"/notes/20180620190521/"},"frontmatter":{"date":"June 20, 2018","title":"现代浏览器的工作原理（三）","description":"笔记（三）介绍了现代浏览器如何处理html文档，除了html文档之外，浏览器还需要处理样式文件，浏览器是如何解析css文件的呢？本博文对现代浏览器解析css文档的原理进行了详细阐述。"}}},{"node":{"excerpt":"解析HTML文档流程 　　现代浏览器解析html文档的流程如图1所示（图片摘自 html5标准 ）。 　　上述解析流程中各个处理阶段的功能说明如下： \n　　（1）Byte Stream Decoder（字节流解码器）：将获取到的html文档字节流解析成Unicode…","fields":{"slug":"/notes/20180424213011/"},"frontmatter":{"date":"April 24, 2018","title":"现代浏览器的工作原理（二）","description":"笔记（一）对现代浏览器的组成，从比较宏观的校对对现代浏览器进行了介绍。从本博文开始，笔者将会从浏览器如何处理html、css以及javascript这些比较细微的角度对浏览器的工作原理进行介绍。本博文详细描述了现代浏览器如何解析html文档。"}}},{"node":{"excerpt":"…","fields":{"slug":"/tips/20180422162446/"},"frontmatter":{"date":"April 22, 2018","title":"解决移动端网页开发“滚动穿透”问题","description":"在移动端网页中，经常会以弹层的形式来展示信息给用户。在开发弹层时经常会遇到这样一个问题：当用户手指在弹层上滑动时，弹层下面的内容也会跟随手指的滑动一起滚动。这就是移动端网页的 \"滚动穿透\" 问题。本博文介绍了两种解决方案，可以根据业务需求选择合适的解决方案。"}}},{"node":{"excerpt":"前言 　　了解浏览器的工作原理是一名前端开发工程师构的必修课。最近，笔者在工作之余，细心研读了以色列开发人员Tali Garsiel针对现代浏览器工作原理的 研究成果 以及 html…","fields":{"slug":"/notes/20180412215709/"},"frontmatter":{"date":"April 12, 2018","title":"现代浏览器的工作原理（一）","description":"了解浏览器的工作原理是一名前端开发工程师构的必修课。最近，笔者在工作之余，细心研读了以色列开发人员Tali Garsiel针对现代浏览器工作原理的研究成果以及html5标准文档等相关内容，并将自己的心得体会在博客中以笔记的形式记录下来。这篇博文是整个笔记的第一部分，主要对现代浏览器的组成进行介绍。"}}},{"node":{"excerpt":"问题背景 　　在项目开发中，querySelector/querySelectorAll经常被用来选择目标元素。最近笔者在开发图片轮播组件时使用querySelectorAll…","fields":{"slug":"/notes/20180411213829/"},"frontmatter":{"date":"April 11, 2018","title":"querySelector/querySelectorAll遍历元素的顺序","description":"在项目开发中，querySelector/querySelectorAll经常被用来选择目标元素。最近笔者在开发图片轮播组件时使用querySelectorAll来选择待轮播的图片元素，然后拟将返回的列表中元素的排列顺序当做元素的展示顺序。这时有一个问题不禁困扰着笔者，querySelectorAll返回的元素列表中的元素究竟是以何种顺序排列？笔者查阅了相关资料，弄清楚了querySelector/querySelectorAll遍历元素的顺序。"}}},{"node":{"excerpt":"click事件延迟触发原因 　　为了优化PC站页面在移动设备上的显示，现代移动端浏览器默认开启页面双击缩放功能。为了判断用户当前手势是单击还是双击，浏览器在touchend事件触发后设置了一个300ms…","fields":{"slug":"/notes/20180321215307/"},"frontmatter":{"date":"March 21, 2018","title":"移动端浏览器click事件延迟触发的研究","description":"在移动端web页面开发过程中，click事件会有大概300ms左右的延时。点击延时会给用户带来极糟糕的体验，如何消除移动端网页的点击延时呢？笔者经过查找资料，将所得到的收获总结成这篇博文。"}}},{"node":{"excerpt":"Base-64编码原理 　　Base-64编码的目的是将任意一组字节转换成由常见的文本字符组成的字符序列。Base-64编码的实现流程如下： 首先将待编码的二进制序列划分成多个块，每块包含6个bit。由于一个字节对应8个bit…","fields":{"slug":"/notes/20180314211238/"},"frontmatter":{"date":"March 14, 2018","title":"Base-64编码学习笔记","description":"Base-64编码的目的是将任意一组字节转换成由常见的文本字符组成的字符序列。在前端开发中经常会和Base-64编码打交道，本博文对Base-64编码进行一个较为详细的讲述。"}}},{"node":{"excerpt":"协议产生背景 　　http协议是一个单向、无连接、无状态的协议。因为协议的特性，在客户端需要即时获取服务端变动的业务场景下，http协议通信效率低下。为了弥补http协议这方面的缺陷，人们设计出了WebSocket协议。该协议建立在http协议的基础上，对http…","fields":{"slug":"/notes/20180312213842/"},"frontmatter":{"date":"March 12, 2018","title":"WebSocket协议学习笔记","description":"http协议是一个单向、无连接、无状态的协议。因为协议的特性，在客户端需要即时获取服务端变动的业务场景下，http协议通信效率低下。为了弥补http协议这方面的缺陷，人们设计出了WebSocket协议。该协议建立在http协议的基础上，对http协议的功能进行了扩展。本文详细介绍了WebSocket协议的基本概念及其使用方法。"}}},{"node":{"excerpt":"点击查看英文原文 延时比设置的时间长的原因 　　 setTimeout / setInterval 延时超出预期时间是由多种原因造成的。常见的原因归结如下： 限制延时不得低于4ms 　　在现代浏览器中，当回调函数嵌套达到一定级别或者在触发一定数量的setInterval…","fields":{"slug":"/translate/20180202205143/"},"frontmatter":{"date":"February 02, 2018","title":"为什么setTimeout和setInterval的实际延时比设置的时间长","description":"在前端开发中经常会使用setTimeout和setInterval来进行延时操作，但是代码实际运行起来后开发者往往发现真实延时要比代码中设置的延时量要长不少。设置setTimeout的延时量为0并不能实现真正的0毫秒延时。产生这种现象的原因是什么？本文对此进行了总结和讨论。"}}},{"node":{"excerpt":"问题背景 　　笔者在项目开发中使用 webpack 构建前端静态资源，项目中用到了ejs模板并使用 ejs-loader 进行解析。当笔者使用ejs的 include语法 在一个ejs模板中引入另一个ejs模板时，webpack一直构建失败。 问题产生原因 　　笔者在ejs…","fields":{"slug":"/tips/20180125192502/"},"frontmatter":{"date":"January 25, 2018","title":"解决webpack中使用ejs-loader时模板嵌套的问题","description":"笔者在项目开发中使用webpack构建前端静态资源，项目中用到了ejs模板并使用ejs-loader进行解析。当笔者使用ejs的include语法在一个ejs模板中引入另一个ejs模板时，webpack一直构建失败。经过查找资料，笔者找到了解决问题的办法，并将其记录在本篇博文中。"}}},{"node":{"excerpt":"前言 　　前端工程师开发的网站是直接与用户打交道的，网页用户体验的好坏也直接或间接地体现了一个前端工程师水平的高低。特别是对于Ｃ端（用户端）网页的开发，用户体验至关重要。 \n　　目前，根据终端设备的不同，大体可将网站开发分为PC站和移动端H5页面两种。近些年来由于 HTML…","fields":{"slug":"/image/20171105132655/"},"frontmatter":{"date":"November 05, 2017","title":"图片等比例缩放","description":"目前终端设备的屏幕尺寸和分辨率纷纷杂杂，对于同一尺寸的图片而言，它在某些宽屏设备上可能显示的非常完美，但是在某些窄屏手机上会显示不全。为了让网页具备更好的用户体验，从而吸引更多的用户资源，网页图片的展示需要自适应不同尺寸的终端设备。为了解决图片的适配问题，最常用也是笔者认为最合适的解决方案就是图片的等比例缩放。本文详细介绍了如何实现图片的等比例缩放。"}}},{"node":{"excerpt":"JS数据类型 　　ECMAScript 5（ES 5）规定了5种简单（基本）数据类型： undefined、null、boolean、number、string 以及1种复杂数据类型： object 。ECMAScript 6（ES 6）增加了1个基本数据类型： symbol…","fields":{"slug":"/javascript/20170829011122/"},"frontmatter":{"date":"August 29, 2017","title":"JavaScript基础（二）","description":"本文主要介绍了js数据类型以及作用域链。"}}},{"node":{"excerpt":"JavaScript语言的组成 　　JavaScript语言（以下简称“JS”）包含的内容可以由图1来概括： 　　 ECMAScript 由 ECMA-262标准 定义，规定了语言核心功能。JS实现了 ECMAScript…","fields":{"slug":"/javascript/20170829010341/"},"frontmatter":{"date":"August 29, 2017","title":"JavaScript基础（一）","description":"本文主要介绍了一些基本概念，如DOM、BOM等。"}}}]}},"pageContext":{}}